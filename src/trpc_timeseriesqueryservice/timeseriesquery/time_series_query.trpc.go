// Code generated by trpc-go/trpc-cmdline v1.0.7. DO NOT EDIT.
// source: timeseriesquery/time_series_query.proto

package timeseriesquery

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
	"trpc.group/trpc-go/trpc-go/stream"
)

// START ======================================= Server Service Definition ======================================= START

// TimeSeriesQueryServiceService defines service.
type TimeSeriesQueryServiceService interface {
	Query(ctx context.Context, req *QueryRequest) (*QueryResponse, error)

	ClientStreamQuery(TimeSeriesQueryService_ClientStreamQueryServer) error

	ServerStreamQuery(*QueryRequest, TimeSeriesQueryService_ServerStreamQueryServer) error

	BidirectionalStreamQuery(TimeSeriesQueryService_BidirectionalStreamQueryServer) error
}

func TimeSeriesQueryServiceService_Query_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TimeSeriesQueryServiceService).Query(ctx, reqbody.(*QueryRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TimeSeriesQueryServiceService_ClientStreamQuery_Handler(srv interface{}, stream server.Stream) error {
	return srv.(TimeSeriesQueryServiceService).ClientStreamQuery(&timeSeriesQueryServiceClientStreamQueryServer{stream})
}

type TimeSeriesQueryService_ClientStreamQueryServer interface {
	SendAndClose(*QueryResponse) error
	Recv() (*QueryRequest, error)
	server.Stream
}

type timeSeriesQueryServiceClientStreamQueryServer struct {
	server.Stream
}

func (x *timeSeriesQueryServiceClientStreamQueryServer) SendAndClose(m *QueryResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *timeSeriesQueryServiceClientStreamQueryServer) Recv() (*QueryRequest, error) {
	m := new(QueryRequest)
	if err := x.Stream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func TimeSeriesQueryServiceService_ServerStreamQuery_Handler(srv interface{}, stream server.Stream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeSeriesQueryServiceService).ServerStreamQuery(m, &timeSeriesQueryServiceServerStreamQueryServer{stream})
}

type TimeSeriesQueryService_ServerStreamQueryServer interface {
	Send(*QueryResponse) error
	server.Stream
}

type timeSeriesQueryServiceServerStreamQueryServer struct {
	server.Stream
}

func (x *timeSeriesQueryServiceServerStreamQueryServer) Send(m *QueryResponse) error {
	return x.Stream.SendMsg(m)
}

func TimeSeriesQueryServiceService_BidirectionalStreamQuery_Handler(srv interface{}, stream server.Stream) error {
	return srv.(TimeSeriesQueryServiceService).BidirectionalStreamQuery(&timeSeriesQueryServiceBidirectionalStreamQueryServer{stream})
}

type TimeSeriesQueryService_BidirectionalStreamQueryServer interface {
	Send(*QueryResponse) error
	Recv() (*QueryRequest, error)
	server.Stream
}

type timeSeriesQueryServiceBidirectionalStreamQueryServer struct {
	server.Stream
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryServer) Send(m *QueryResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryServer) Recv() (*QueryRequest, error) {
	m := new(QueryRequest)
	if err := x.Stream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeSeriesQueryServiceServer_ServiceDesc descriptor for server.RegisterService.
var TimeSeriesQueryServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName:  "trpc.crayon.timeseriesquery.TimeSeriesQueryService",
	HandlerType:  ((*TimeSeriesQueryServiceService)(nil)),
	StreamHandle: stream.NewStreamDispatcher(),
	Methods: []server.Method{
		{
			Name: "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/Query",
			Func: TimeSeriesQueryServiceService_Query_Handler,
		},
	},
	Streams: []server.StreamDesc{
		{
			StreamName:    "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ClientStreamQuery",
			Handler:       TimeSeriesQueryServiceService_ClientStreamQuery_Handler,
			ServerStreams: false,
		},
		{
			StreamName:    "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ServerStreamQuery",
			Handler:       TimeSeriesQueryServiceService_ServerStreamQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/BidirectionalStreamQuery",
			Handler:       TimeSeriesQueryServiceService_BidirectionalStreamQuery_Handler,
			ServerStreams: true,
		},
	},
}

// RegisterTimeSeriesQueryServiceService registers service.
func RegisterTimeSeriesQueryServiceService(s server.Service, svr TimeSeriesQueryServiceService) {
	if err := s.Register(&TimeSeriesQueryServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("TimeSeriesQueryService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedTimeSeriesQueryService struct{}

func (s *UnimplementedTimeSeriesQueryService) Query(ctx context.Context, req *QueryRequest) (*QueryResponse, error) {
	return nil, errors.New("rpc Query of service TimeSeriesQueryService is not implemented")
}
func (s *UnimplementedTimeSeriesQueryService) ClientStreamQuery(stream TimeSeriesQueryService_ClientStreamQueryServer) error {
	return errors.New("rpc ClientStreamQuery of service TimeSeriesQueryService is not implemented")
}
func (s *UnimplementedTimeSeriesQueryService) ServerStreamQuery(req *QueryRequest, stream TimeSeriesQueryService_ServerStreamQueryServer) error {
	return errors.New("rpc ServerStreamQuery of service TimeSeriesQueryService is not implemented")
}
func (s *UnimplementedTimeSeriesQueryService) BidirectionalStreamQuery(stream TimeSeriesQueryService_BidirectionalStreamQueryServer) error {
	return errors.New("rpc BidirectionalStreamQuery of service TimeSeriesQueryService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// TimeSeriesQueryServiceClientProxy defines service client proxy
type TimeSeriesQueryServiceClientProxy interface {
	Query(ctx context.Context, req *QueryRequest, opts ...client.Option) (rsp *QueryResponse, err error)

	ClientStreamQuery(ctx context.Context, opts ...client.Option) (TimeSeriesQueryService_ClientStreamQueryClient, error)

	ServerStreamQuery(ctx context.Context, req *QueryRequest, opts ...client.Option) (TimeSeriesQueryService_ServerStreamQueryClient, error)

	BidirectionalStreamQuery(ctx context.Context, opts ...client.Option) (TimeSeriesQueryService_BidirectionalStreamQueryClient, error)
}

type TimeSeriesQueryServiceClientProxyImpl struct {
	client       client.Client
	streamClient stream.Client
	opts         []client.Option
}

var NewTimeSeriesQueryServiceClientProxy = func(opts ...client.Option) TimeSeriesQueryServiceClientProxy {
	return &TimeSeriesQueryServiceClientProxyImpl{client: client.DefaultClient, streamClient: stream.DefaultStreamClient, opts: opts}
}

func (c *TimeSeriesQueryServiceClientProxyImpl) Query(ctx context.Context, req *QueryRequest, opts ...client.Option) (*QueryResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.crayon.timeseriesquery.TimeSeriesQueryService/Query")
	msg.WithCalleeServiceName(TimeSeriesQueryServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("crayon")
	msg.WithCalleeServer("timeseriesquery")
	msg.WithCalleeService("TimeSeriesQueryService")
	msg.WithCalleeMethod("Query")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TimeSeriesQueryServiceClientProxyImpl) ClientStreamQuery(ctx context.Context, opts ...client.Option) (TimeSeriesQueryService_ClientStreamQueryClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ClientStreamQuery")
	msg.WithCalleeServiceName(TimeSeriesQueryServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("crayon")
	msg.WithCalleeServer("timeseriesquery")
	msg.WithCalleeService("TimeSeriesQueryService")
	msg.WithCalleeMethod("ClientStreamQuery")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ClientStreamQuery"
	clientStreamDesc.ClientStreams = true
	clientStreamDesc.ServerStreams = false

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ClientStreamQuery", callopts...)
	if err != nil {
		return nil, err
	}
	x := &timeSeriesQueryServiceClientStreamQueryClient{stream}
	return x, nil
}

type TimeSeriesQueryService_ClientStreamQueryClient interface {
	Send(*QueryRequest) error
	CloseAndRecv() (*QueryResponse, error)
	client.ClientStream
}

type timeSeriesQueryServiceClientStreamQueryClient struct {
	client.ClientStream
}

func (x *timeSeriesQueryServiceClientStreamQueryClient) Send(m *QueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeSeriesQueryServiceClientStreamQueryClient) CloseAndRecv() (*QueryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *TimeSeriesQueryServiceClientProxyImpl) ServerStreamQuery(ctx context.Context, req *QueryRequest, opts ...client.Option) (TimeSeriesQueryService_ServerStreamQueryClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ServerStreamQuery")
	msg.WithCalleeServiceName(TimeSeriesQueryServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("crayon")
	msg.WithCalleeServer("timeseriesquery")
	msg.WithCalleeService("TimeSeriesQueryService")
	msg.WithCalleeMethod("ServerStreamQuery")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ServerStreamQuery"
	clientStreamDesc.ClientStreams = false
	clientStreamDesc.ServerStreams = true

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/ServerStreamQuery", callopts...)
	if err != nil {
		return nil, err
	}
	x := &timeSeriesQueryServiceServerStreamQueryClient{stream}
	if err := x.ClientStream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeSeriesQueryService_ServerStreamQueryClient interface {
	Recv() (*QueryResponse, error)
	client.ClientStream
}

type timeSeriesQueryServiceServerStreamQueryClient struct {
	client.ClientStream
}

func (x *timeSeriesQueryServiceServerStreamQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *TimeSeriesQueryServiceClientProxyImpl) BidirectionalStreamQuery(ctx context.Context, opts ...client.Option) (TimeSeriesQueryService_BidirectionalStreamQueryClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.crayon.timeseriesquery.TimeSeriesQueryService/BidirectionalStreamQuery")
	msg.WithCalleeServiceName(TimeSeriesQueryServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("crayon")
	msg.WithCalleeServer("timeseriesquery")
	msg.WithCalleeService("TimeSeriesQueryService")
	msg.WithCalleeMethod("BidirectionalStreamQuery")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/BidirectionalStreamQuery"
	clientStreamDesc.ClientStreams = true
	clientStreamDesc.ServerStreams = true

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.crayon.timeseriesquery.TimeSeriesQueryService/BidirectionalStreamQuery", callopts...)
	if err != nil {
		return nil, err
	}
	x := &timeSeriesQueryServiceBidirectionalStreamQueryClient{stream}
	return x, nil
}

type TimeSeriesQueryService_BidirectionalStreamQueryClient interface {
	Send(*QueryRequest) error
	Recv() (*QueryResponse, error)
	client.ClientStream
}

type timeSeriesQueryServiceBidirectionalStreamQueryClient struct {
	client.ClientStream
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryClient) Send(m *QueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// END ======================================= Client Service Definition ======================================= END
