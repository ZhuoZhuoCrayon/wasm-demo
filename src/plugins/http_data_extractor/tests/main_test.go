package main

import (
	"bufio"
	"bytes"
	"fmt"
	"github.com/valyala/fastjson"
	"io"
	"net/http"
	"strconv"
	"testing"
)

func extract(b io.ReadCloser, fields map[string]bool) {
	body, err := io.ReadAll(b)
	if err != nil || len(body) == 0 {
		return
	}
	fmt.Printf("[extract] body -> %#v \n", body)
	fv, err := fastjson.ParseBytes(body)
	if err != nil {
		return
	}
	fmt.Printf("[extract] json -> %v \n", fv.String())
	for field := range fields {
		if !fv.Exists(field) {
			continue
		}
		v := ""
		switch fv.Get(field).Type() {
		case fastjson.TypeString:
			v = string(fv.GetStringBytes(field))
		case fastjson.TypeNumber:
			v = strconv.Itoa(fv.GetInt(field))
		}
		if v != "" {
			fmt.Printf("field -> %s, value -> %s \n", field, v)
		}
	}
	return
}

func TestOnHttpResp(t *testing.T) {
	payload := []byte{
		0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0xd, 0xa,
		0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70,
		0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3b, 0x20, 0x63, 0x68,
		0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0xd, 0xa, 0x44, 0x61, 0x74, 0x65, 0x3a,
		0x20, 0x53, 0x75, 0x6e, 0x2c, 0x20, 0x33, 0x31, 0x20, 0x4d, 0x61, 0x72, 0x20, 0x32, 0x30, 0x32, 0x34, 0x20,
		0x30, 0x33, 0x3a, 0x31, 0x39, 0x3a, 0x31, 0x31, 0x20, 0x47, 0x4d, 0x54, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74,
		0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x37, 0x34, 0xd, 0xa, 0x43, 0x6f,
		0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0xd, 0xa, 0xd, 0xa,
		0x7b, 0x22, 0x6d, 0x73, 0x67, 0x22, 0x3a, 0x22, 0x4f, 0x4b, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
		0x43, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75,
		0x65, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x73, 0x65, 0x71, 0x49, 0x64, 0x22, 0x3a, 0x22, 0x63, 0x6f, 0x34, 0x64, 0x63,
		0x62, 0x72, 0x65, 0x71, 0x35, 0x69, 0x71, 0x33, 0x39, 0x62, 0x6a, 0x36, 0x67, 0x36, 0x67, 0x22, 0x7d,
	}

	resp, err := http.ReadResponse(bufio.NewReader(bytes.NewReader(payload)), nil)
	if err != nil {
		t.Errorf("%v", err)
	}
	extract(resp.Body, map[string]bool{"ret": true, "seqId": true})
}
