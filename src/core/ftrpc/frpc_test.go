package ftrpc

import (
	"fmt"
	"testing"
)

func Test1(t *testing.T) {
	tests := []struct {
		isResp  bool
		payload []byte
	}{
		{
			isResp: false,
			payload: []byte{
				0x09, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x18, 0x01, 0x20, 0xe7,
				0x07, 0x2a, 0x1a, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
				0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x26, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
				0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65,
				0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x2d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
				0x65, 0x73, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75,
				0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x16, 0x0a, 0x06,
				0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x0c, 0x72, 0x65, 0x71, 0x2d, 0x30, 0x31, 0x30, 0x2d, 0x30, 0x35, 0x33, 0x31,
				0x0a, 0x1c, 0x08, 0x3c, 0x12, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x03, 0x76, 0x70, 0x63, 0x18, 0xe0,
				0x9e, 0xb0, 0xb0, 0x06, 0x20, 0x9c, 0x9f, 0xb0, 0xb0, 0x06,
			},
		},
		{
			isResp: true,
			payload: []byte{
				0x09, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x18, 0x01, 0x42, 0x16,
				0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x0c, 0x72, 0x65, 0x71, 0x2d, 0x30, 0x31, 0x30, 0x2d, 0x30, 0x35,
				0x33, 0x31, 0x0a, 0x38, 0x0a, 0x13, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x09, 0x63, 0x70, 0x75, 0x5f,
				0x75, 0x73, 0x61, 0x67, 0x65, 0x0a, 0x10, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x05, 0x31, 0x30,
				0x30, 0x30, 0x30, 0x12, 0x0f, 0x08, 0xe0, 0x9e, 0xb0, 0xb0, 0x06, 0x11, 0x08, 0xf8, 0x39, 0xd9, 0xe1, 0x20, 0xec, 0x3f,
				0x0a, 0x38, 0x0a, 0x13, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
				0x61, 0x67, 0x65, 0x0a, 0x10, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x05, 0x31, 0x30, 0x30, 0x30,
				0x31, 0x12, 0x0f, 0x08, 0xe0, 0x9e, 0xb0, 0xb0, 0x06, 0x11, 0xed, 0xf0, 0x01, 0x00, 0x26, 0xfa, 0xe2, 0x3f, 0x0a, 0x38,
				0x0a, 0x13, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67,
				0x65, 0x0a, 0x10, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x05, 0x31, 0x30, 0x30, 0x30, 0x32, 0x12,
				0x0f, 0x08, 0xe0, 0x9e, 0xb0, 0xb0, 0x06, 0x11, 0xcf, 0x4f, 0x0d, 0x00, 0x3e, 0x8a, 0xee, 0x3f,
			},
		},
	}
	for _, tt := range tests {
		tp, err := Read(tt.payload)
		if err != nil {
			t.Errorf("failed to read trpc payload, err -> %v", err)
		}
		if tt.isResp {
			respProtocol, err := HandleUnaryResp(tp)
			if err != nil {
				t.Errorf("failed to handle unary reponse")
			}
			fmt.Printf("FrameHeader -> %v\nrespProtocol -> %v\n", tp.FrameHeader, respProtocol)
		} else {
			reqProtocol, err := HandleUnaryReq(tp)
			if err != nil {
				t.Errorf("failed to handle unary request")
			}
			fmt.Printf("FrameHeader -> %v\nreqProtocol -> %v\n", tp.FrameHeader, reqProtocol)
		}
	}
}
