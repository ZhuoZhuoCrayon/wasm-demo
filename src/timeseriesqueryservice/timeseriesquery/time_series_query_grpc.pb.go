// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: timeseriesquery/time_series_query.proto

package timeseriesquery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TimeSeriesQueryService_ClientStreamQuery_FullMethodName        = "/timeseriesquery.TimeSeriesQueryService/ClientStreamQuery"
	TimeSeriesQueryService_ServerStreamQuery_FullMethodName        = "/timeseriesquery.TimeSeriesQueryService/ServerStreamQuery"
	TimeSeriesQueryService_BidirectionalStreamQuery_FullMethodName = "/timeseriesquery.TimeSeriesQueryService/BidirectionalStreamQuery"
)

// TimeSeriesQueryServiceClient is the client API for TimeSeriesQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeSeriesQueryServiceClient interface {
	ClientStreamQuery(ctx context.Context, opts ...grpc.CallOption) (TimeSeriesQueryService_ClientStreamQueryClient, error)
	ServerStreamQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (TimeSeriesQueryService_ServerStreamQueryClient, error)
	BidirectionalStreamQuery(ctx context.Context, opts ...grpc.CallOption) (TimeSeriesQueryService_BidirectionalStreamQueryClient, error)
}

type timeSeriesQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSeriesQueryServiceClient(cc grpc.ClientConnInterface) TimeSeriesQueryServiceClient {
	return &timeSeriesQueryServiceClient{cc}
}

func (c *timeSeriesQueryServiceClient) ClientStreamQuery(ctx context.Context, opts ...grpc.CallOption) (TimeSeriesQueryService_ClientStreamQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeSeriesQueryService_ServiceDesc.Streams[0], TimeSeriesQueryService_ClientStreamQuery_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &timeSeriesQueryServiceClientStreamQueryClient{stream}
	return x, nil
}

type TimeSeriesQueryService_ClientStreamQueryClient interface {
	Send(*QueryRequest) error
	CloseAndRecv() (*QueryResponse, error)
	grpc.ClientStream
}

type timeSeriesQueryServiceClientStreamQueryClient struct {
	grpc.ClientStream
}

func (x *timeSeriesQueryServiceClientStreamQueryClient) Send(m *QueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeSeriesQueryServiceClientStreamQueryClient) CloseAndRecv() (*QueryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeSeriesQueryServiceClient) ServerStreamQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (TimeSeriesQueryService_ServerStreamQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeSeriesQueryService_ServiceDesc.Streams[1], TimeSeriesQueryService_ServerStreamQuery_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &timeSeriesQueryServiceServerStreamQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeSeriesQueryService_ServerStreamQueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type timeSeriesQueryServiceServerStreamQueryClient struct {
	grpc.ClientStream
}

func (x *timeSeriesQueryServiceServerStreamQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeSeriesQueryServiceClient) BidirectionalStreamQuery(ctx context.Context, opts ...grpc.CallOption) (TimeSeriesQueryService_BidirectionalStreamQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeSeriesQueryService_ServiceDesc.Streams[2], TimeSeriesQueryService_BidirectionalStreamQuery_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &timeSeriesQueryServiceBidirectionalStreamQueryClient{stream}
	return x, nil
}

type TimeSeriesQueryService_BidirectionalStreamQueryClient interface {
	Send(*QueryRequest) error
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type timeSeriesQueryServiceBidirectionalStreamQueryClient struct {
	grpc.ClientStream
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryClient) Send(m *QueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeSeriesQueryServiceServer is the server API for TimeSeriesQueryService service.
// All implementations must embed UnimplementedTimeSeriesQueryServiceServer
// for forward compatibility
type TimeSeriesQueryServiceServer interface {
	ClientStreamQuery(TimeSeriesQueryService_ClientStreamQueryServer) error
	ServerStreamQuery(*QueryRequest, TimeSeriesQueryService_ServerStreamQueryServer) error
	BidirectionalStreamQuery(TimeSeriesQueryService_BidirectionalStreamQueryServer) error
	mustEmbedUnimplementedTimeSeriesQueryServiceServer()
}

// UnimplementedTimeSeriesQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeSeriesQueryServiceServer struct {
}

func (UnimplementedTimeSeriesQueryServiceServer) ClientStreamQuery(TimeSeriesQueryService_ClientStreamQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamQuery not implemented")
}
func (UnimplementedTimeSeriesQueryServiceServer) ServerStreamQuery(*QueryRequest, TimeSeriesQueryService_ServerStreamQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamQuery not implemented")
}
func (UnimplementedTimeSeriesQueryServiceServer) BidirectionalStreamQuery(TimeSeriesQueryService_BidirectionalStreamQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamQuery not implemented")
}
func (UnimplementedTimeSeriesQueryServiceServer) mustEmbedUnimplementedTimeSeriesQueryServiceServer() {
}

// UnsafeTimeSeriesQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeSeriesQueryServiceServer will
// result in compilation errors.
type UnsafeTimeSeriesQueryServiceServer interface {
	mustEmbedUnimplementedTimeSeriesQueryServiceServer()
}

func RegisterTimeSeriesQueryServiceServer(s grpc.ServiceRegistrar, srv TimeSeriesQueryServiceServer) {
	s.RegisterService(&TimeSeriesQueryService_ServiceDesc, srv)
}

func _TimeSeriesQueryService_ClientStreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeSeriesQueryServiceServer).ClientStreamQuery(&timeSeriesQueryServiceClientStreamQueryServer{stream})
}

type TimeSeriesQueryService_ClientStreamQueryServer interface {
	SendAndClose(*QueryResponse) error
	Recv() (*QueryRequest, error)
	grpc.ServerStream
}

type timeSeriesQueryServiceClientStreamQueryServer struct {
	grpc.ServerStream
}

func (x *timeSeriesQueryServiceClientStreamQueryServer) SendAndClose(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeSeriesQueryServiceClientStreamQueryServer) Recv() (*QueryRequest, error) {
	m := new(QueryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TimeSeriesQueryService_ServerStreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeSeriesQueryServiceServer).ServerStreamQuery(m, &timeSeriesQueryServiceServerStreamQueryServer{stream})
}

type TimeSeriesQueryService_ServerStreamQueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type timeSeriesQueryServiceServerStreamQueryServer struct {
	grpc.ServerStream
}

func (x *timeSeriesQueryServiceServerStreamQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TimeSeriesQueryService_BidirectionalStreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeSeriesQueryServiceServer).BidirectionalStreamQuery(&timeSeriesQueryServiceBidirectionalStreamQueryServer{stream})
}

type TimeSeriesQueryService_BidirectionalStreamQueryServer interface {
	Send(*QueryResponse) error
	Recv() (*QueryRequest, error)
	grpc.ServerStream
}

type timeSeriesQueryServiceBidirectionalStreamQueryServer struct {
	grpc.ServerStream
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeSeriesQueryServiceBidirectionalStreamQueryServer) Recv() (*QueryRequest, error) {
	m := new(QueryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeSeriesQueryService_ServiceDesc is the grpc.ServiceDesc for TimeSeriesQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeSeriesQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeseriesquery.TimeSeriesQueryService",
	HandlerType: (*TimeSeriesQueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamQuery",
			Handler:       _TimeSeriesQueryService_ClientStreamQuery_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamQuery",
			Handler:       _TimeSeriesQueryService_ServerStreamQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamQuery",
			Handler:       _TimeSeriesQueryService_BidirectionalStreamQuery_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "timeseriesquery/time_series_query.proto",
}
