package main

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/propertyf"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/statf"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"testing"
)

func TestParseProperty(t *testing.T) {

	tests := []struct {
		hexStr string
	}{
		{
			hexStr: "100120013c4200046ace561b7461662e74616670726f70657274792e50726f70657274794f626a660d7265706f727450726f704d73677d000103111800080a0613515143686573732e4163746976697479537672160026074572724c6f673a3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e41637469766974795376721600260e457863657074696f6e2d4c6f673a3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002634515143686573732e41637469766974795376722e41637453657276616e744f626a416461707465722e636f6e6e656374526174653600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e41637469766974795376721600262e515143686573732e41637469766974795376722e41637453657276616e744f626a416461707465722e71756575653600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002633515143686573732e41637469766974795376722e41637453657276616e744f626a416461707465722e74696d656f75744e756d3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e41637469766974795376721600261f515143686573732e41637469766974795376722e6173796e637175657565303600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002635515143686573732e41637469766974795376722e657863657074696f6e5f73696e676c655f6c6f675f6d6f72655f7468616e5f334d3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002620515143686573732e41637469766974795376722e73656e6472737071756575653600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b811388980001060e5441465f4d41535445525f4b45591613515143686573732e4163746976697479537672a80c",
		},
		{
			hexStr: "100120013c420004c29d561b7461662e74616670726f70657274792e50726f70657274794f626a660d7265706f727450726f704d73677d000103111800080a0613515143686573732e4163746976697479537672160026074572724c6f673a3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e41637469766974795376721600260e457863657074696f6e2d4c6f673a3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002634515143686573732e41637469766974795376722e41637453657276616e744f626a416461707465722e636f6e6e656374526174653600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e41637469766974795376721600262e515143686573732e41637469766974795376722e41637453657276616e744f626a416461707465722e71756575653600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002633515143686573732e41637469766974795376722e41637453657276616e744f626a416461707465722e74696d656f75744e756d3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e41637469766974795376721600261f515143686573732e41637469766974795376722e6173796e637175657565303600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002635515143686573732e41637469766974795376722e657863657074696f6e5f73696e676c655f6c6f675f6d6f72655f7468616e5f334d3600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b0a0613515143686573732e416374697669747953767216002620515143686573732e41637469766974795376722e73656e6472737071756575653600460056006615636f6e7461696e65722d616374697669747973767270020b1a090c0b811388980001060e5441465f4d41535445525f4b45591613515143686573732e4163746976697479537672a80c",
		},
		{
			hexStr: "10012c3c4009561d746172732e7461727370726f70657274792e50726f70657274794f626a660d7265706f727450726f704d73677d000101961800040a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260353756270020b1a0900050a060353756d16033234360b0a0603417667160234310b0a06054469737472161b2d3130307c302c2d35307c302c307c312c35307c322c3130307c330b0a06034d6178160238350b0a06034d696e16022d330b0b0a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260b537562526571756573747370020b1a0900010a0605436f756e741601360b0b0a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260341646470020b1a0900050a060353756d16033439300b0a0603417667161138312e36363636363636363636363636370b0a060544697374721614307c302c35307c302c3130307c352c3230307c310b0a06034d617816033130350b0a06034d696e160235370b0b0a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260b416464526571756573747370020b1a0900010a0605436f756e741601360b0b8107d0980ca80c",
		},
		{
			hexStr: "10012c3c4100b1561d746172732e7461727370726f70657274792e50726f70657274794f626a660d7265706f727450726f704d73677d000101a51800040a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260b416464526571756573747370020b1a0900010a0605436f756e741601360b0b0a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260353756270020b1a0900050a060353756d160232300b0a06034176671612332e333333333333333333333333333333350b0a06054469737472161b2d3130307c302c2d35307c302c307c332c35307c322c3130307c310b0a06034d6178160236380b0a06034d696e16032d33370b0b0a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260b537562526571756573747370020b1a0900010a0605436f756e741601360b0b0a060f546573744170702e48656c6c6f476f160e3139322e3136382e3235352e3130260341646470020b1a0900050a060353756d16033434300b0a0603417667161137332e33333333333333333333333333330b0a060544697374721614307c302c35307c312c3130307c352c3230307c300b0a06034d6178160239340b0a06034d696e160233330b0b8107d0980ca80c",
		},
	}

	for _, tt := range tests {
		data, err := hex.DecodeString(tt.hexStr)
		if err != nil {
			t.Errorf("failed to decode sbuffer payload, err -> %v", err)
		}

		var length int32
		reqBuf := codec.NewReader(data)
		req := &requestf.RequestPacket{}
		if err := req.ReadFrom(reqBuf); err != nil {
			t.Errorf("failed to parse req payload, err -> %v", err)
		}
		//if req.SServantName != "taf.tafproperty.PropertyObj" || req.SFuncName != "reportPropMsg" {
		//	t.Logf("skip to parse, SServantName -> %v, SFuncName -> %v", req.SServantName, req.SFuncName)
		//	continue
		//}
		fmt.Printf("context -> %v\n", req.Context)
		sBuf := codec.NewReader(tools.Int8ToByte(req.SBuffer))
		_, err = sBuf.SkipTo(codec.MAP, 1, true)
		if err != nil {
			t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
		}
		err = sBuf.ReadInt32(&length, 0, true)
		if err != nil {
			t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
		}
		statmsg := make(map[propertyf.StatPropMsgHead]propertyf.StatPropMsgBody)
		for i, e := int32(0), length; i < e; i++ {
			var k propertyf.StatPropMsgHead
			var v propertyf.StatPropMsgBody
			err = k.ReadBlock(sBuf, 0, true)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
			}
			err = v.ReadBlock(sBuf, 1, true)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
			}
			statmsg[k] = v

			msgHeadJson, err := json.Marshal(k)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
				return
			}

			msgBodyJson, err := json.Marshal(v)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
				return
			}
			fmt.Printf("%v \n%v\n", string(msgHeadJson), string(msgBodyJson))
		}
	}
}

func TestParseStat(t *testing.T) {

	tests := []struct {
		hexStr string
	}{
		{
			hexStr: "10012c3c4101615615746172732e74617273737461742e537461744f626a660c7265706f72744d69634d73677d000100f51800020a0610737461745f66726f6d5f736572766572160f546573744170702e48656c6c6f476f26035375623600460e3139322e3136382e3235352e31305c6ca605312e342e350b1a00061c2c38000900051c000a1c0101f41004010bb81c00321c00641c0100c810020103e81c0107d01c4104d551011961008f0b0a0610737461745f66726f6d5f736572766572160f546573744170702e48656c6c6f476f26034164643600460e3139322e3136382e3235352e31305c6ca605312e342e350b1a00061c2c38000900051c000a1c00321c00641c0101f410050107d01c0100c810010103e81c010bb81c410565510120606f0b2c8107d0980ca80c",
		},
		{
			hexStr: "10012c3c41015e5615746172732e74617273737461742e537461744f626a660c7265706f72744d69634d73677d000100f51800020a0610737461745f66726f6d5f736572766572160f546573744170702e48656c6c6f476f26034164643600460e3139322e3136382e3235352e31305c6ca605312e342e350b1a00061c2c38000900321c00641c0101f4100400051c000a1c0100c810020103e81c0107d01c010bb81c41053f51011c61009f0b0a0610737461745f66726f6d5f736572766572160f546573744170702e48656c6c6f476f26035375623600460e3139322e3136382e3235352e31305c6ca605312e342e350b1a00061c2c38000900641c0103e81c0101f410040107d01c010bb81c00051c000a1c00321c0100c810024104f051010760730b2c8107d0980ca80c",
		},
	}

	for _, tt := range tests {
		data, err := hex.DecodeString(tt.hexStr)
		if err != nil {
			t.Errorf("failed to decode sbuffer payload, err -> %v", err)
		}

		var length int32
		reqBuf := codec.NewReader(data)
		req := &requestf.RequestPacket{}
		if err := req.ReadFrom(reqBuf); err != nil {
			t.Errorf("failed to parse req payload, err -> %v", err)
		}

		fmt.Printf("context -> %v\n", req.Context)
		sBuf := codec.NewReader(tools.Int8ToByte(req.SBuffer))
		_, err = sBuf.SkipTo(codec.MAP, 1, true)
		if err != nil {
			t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
		}
		err = sBuf.ReadInt32(&length, 0, true)
		if err != nil {
			t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
		}
		statmsg := make(map[statf.StatMicMsgHead]statf.StatMicMsgBody)
		for i, e := int32(0), length; i < e; i++ {
			var k statf.StatMicMsgHead
			var v statf.StatMicMsgBody
			err = k.ReadBlock(sBuf, 0, true)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
			}
			err = v.ReadBlock(sBuf, 1, true)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
			}
			statmsg[k] = v

			msgHeadJson, err := json.Marshal(k)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
				return
			}

			msgBodyJson, err := json.Marshal(v)
			if err != nil {
				t.Fatalf("failed to parse sbuffer payload, err -> %v", err)
				return
			}
			fmt.Printf("%v \n%v\n", string(msgHeadJson), string(msgBodyJson))
		}
	}
}
