package http2

import (
	"reflect"
	"testing"
)

type Hook struct {
	FrameStack []FrameType
}

func (h *Hook) FrameHook(fh FrameHeader, bf []byte) error {
	h.FrameStack = append(h.FrameStack, fh.Type)
	return nil
}

func TestNewParser(t *testing.T) {
	tests := []struct {
		name    string
		payload []byte
		want    []FrameType
	}{
		{
			name: "Multiply frame",
			payload: []byte{
				0x00, 0x00, 0x02, 0x01, 0x04, 0x00, 0x00, 0x00, 0x03, 0x88, 0xc0, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x2d,
				0x30, 0x31, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x32, 0x10, 0x02, 0x1a, 0x08, 0x4a, 0x6f, 0x68, 0x6e, 0x44,
				0x6f, 0x65, 0x22, 0x14, 0x6a, 0x6f, 0x68, 0x6e, 0x2e, 0x64, 0x6f, 0x65, 0x40, 0x65, 0x78, 0x61, 0x6d,
				0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x0c, 0x0a, 0x08, 0x35, 0x35, 0x35, 0x2d, 0x31, 0x32,
				0x33, 0x34, 0x10, 0x01, 0x2a, 0x0c, 0x0a, 0x08, 0x35, 0x35, 0x35, 0x2d, 0x35, 0x36, 0x37, 0x38, 0x10,
				0x02, 0x2a, 0x0c, 0x0a, 0x08, 0x35, 0x35, 0x35, 0x2d, 0x39, 0x30, 0x31, 0x32, 0x10, 0x02, 0x00, 0x00,
				0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x03, 0xbf, 0xbe,
			},
			want: []FrameType{
				FrameHeaders,
				FrameData,
			},
		},
		{
			name: "Multiply frame with `Ping`",
			payload: []byte{
				0x00, 0x00, 0x08, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x10, 0x10, 0x09, 0x0e, 0x07,
				0x07, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00,
				0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x10, 0x10, 0x09, 0x0e, 0x07, 0x07, 0x00,
				0x00, 0x14, 0x01, 0x04, 0x00, 0x00, 0x00, 0x05, 0x83, 0x86, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0x7e,
				0x8b, 0x3d, 0x65, 0xa8, 0xd2, 0x2c, 0x00, 0x81, 0x60, 0x00, 0x0c, 0xff, 0x00, 0x00, 0x07, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x03,
			},
			want: []FrameType{
				FramePing,
				FrameWindowUpdate,
				FramePing,
				FrameHeaders,
				FrameData,
			},
		},
		{
			name:    "Only Setting frame",
			payload: []byte{0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
			want:    []FrameType{FrameSetting},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			h := Hook{FrameStack: nil}
			parser := NewParser()
			for _, frameType := range []FrameType{
				FrameData,
				FrameHeaders,
				FrameSetting,
				FramePushPromise,
				FramePing,
				FrameWindowUpdate,
				FrameContinuation,
			} {
				parser.RegisterHook(frameType, h.FrameHook)
			}
			parser.Do(tt.payload)
			if !reflect.DeepEqual(tt.want, h.FrameStack) {
				t.Errorf("frame stack want %v but got %v", tt.want, h.FrameStack)
			}
		})
	}
}
